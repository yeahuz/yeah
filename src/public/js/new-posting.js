import { add_listeners, create_node } from './utils.js'import { close_icon } from './icons.js'const photos_area = document.querySelector(".js-photos-area");const photos_preview = document.querySelector(".js-photos-preview");const photos_input = document.querySelector(".js-photos-input");function on_drag_over(e) {  e.stopPropagation();  e.preventDefault();  e.dataTransfer.dropEffect = "copy";}function get_photos_preview(photos_area) {  const existing = document.querySelector(".js-photos-preview");  if (existing) return existing;  const photos_preview = create_node("ul", { class: "js-photos-preview grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2 mb-6" })  photos_area.insertAdjacentElement('beforebegin', photos_preview);  return photos_preview;}function get_file_id(file) {  return `${file.name}${file.lastModified}${file.size}`}function remove_file(file_to_remove) {  const dt = new DataTransfer();  const files = photos_input.files;  for (const file of files) {    if (get_file_id(file) !== get_file_id(file_to_remove)) {      dt.items.add(file)    }  }  if (!dt.files.length) {    get_photos_preview(photos_area).remove();  }  photos_input.files = dt.files;}function generate_previews(files = []) {  for (let i = 0, len = files.length; i < len; i++) {    const file = files[i]    const url = URL.createObjectURL(file);    const li = create_node("li", { class: "relative group rounded-lg" });    const img = create_node("img", { src: url, class: "min-h-[128px] object-fit rounded-lg aspect-video" });    const close_btn = create_node("button", { type: "button", tabindex: "0", class: `outline-none group-hover:scale-100 focus:scale-100 focus:ring-2                                          focus:ring-offset-2 focus:ring-error-500 group-focus:scale-100 md:scale-0 duration-200                                          absolute z-10 bottom-full left-full translate-y-1/2 -translate-x-1/2 bg-error-500 text-white rounded-full p-0.5` })    const radio_input = create_node("input", { type: "radio", value: i, name: "cover_index", id: `cover-${i}`, class: "absolute opacity-0 w-0 -z-10 peer", ...(i === 0 && { checked: true }) })    const main_label = create_node("label", { for: `cover-${i}`, class: `group-hover:scale-100 peer-focus:scale-100 peer-focus:ring-2                    peer-focus:ring-offset-2 peer-focus:ring-primary-600 group-focus:scale-100                    absolute bottom-0 text-xs rounded-bl-lg rounded-tr-lg bg-primary-600 text-white p-2                    peer-checked:scale-100 will-change-transform scale-0 origin-bottom-left duration-200` })    main_label.textContent = i === 0 ? "Обложка" : "Выбрать как обложку";    close_btn.innerHTML = close_icon({ size: 20 });    add_listeners(img, { load: () => URL.revokeObjectURL(url) })    add_listeners(close_btn, { click: () => {      remove_file(file);      li.remove()    }});    add_listeners(radio_input, { change: (e) => {      main_label.textContent = "Обложка"      const siblings = [...li.parentElement.children].filter(c => c !== li);      for (const sibling of siblings) {        const label = sibling.querySelector("label");        label.textContent = "Выбрать как обложку"      }    }});    li.append(img, close_btn, radio_input, main_label);    get_photos_preview(photos_area).append(li);  }}function on_drop(e) {  e.stopPropagation();  e.preventDefault();  const files = e.dataTransfer.files;  if (e.currentTarget.classList.contains("js-photos-area")) {    photos_area.classList.remove("!border-primary-600");  }  photos_input.files = files;  generate_previews(files);}function on_drag_enter(e) {  if (e.currentTarget.classList.contains("js-photos-area")) {    photos_area.classList.add("!border-primary-600");  }}function on_drag_leave(e) {  if (e.currentTarget.classList.contains("js-photos-area")) {    photos_area.classList.remove("!border-primary-600");  }}function on_photos_change(e) {  const files = e.target.files;  generate_previews(files)}add_listeners(photos_area, {  dragover: on_drag_over,  drop: on_drop,  dragenter: on_drag_enter,  dragleave: on_drag_leave});add_listeners(photos_input, {  change: on_photos_change})