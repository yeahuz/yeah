import { render_file } from '../utils/eta.js';import { array_to_tree } from '../utils/index.js';import { redis_client } from '../services/redis.service.js';import { new_posting_schema } from '../schemas/new-posting.schema.js';import * as CategoryService from '../services/category.service.js';import * as S3Service from '../services/s3.service.js';import * as AttachmentService from '../services/attachment.service.js';export async function submit_first_step(req, reply) {  const { id } = req.params;  const { title, category_id } = req.body;  await redis_client.hmset(`${id}-1`, { title, category_id });  reply.redirect(`/postings/wizard/${id}/2`);}export async function submit_second_step(req, reply) {  const { id } = req.params;  const files = req.files();  let fields  let photos = [];  for await (const result of S3Service.upload_multiple(req.files())) {    const { fields: result_fields, ...attachment } = result;    if (!fields) fields = result_fields;    const photo = await AttachmentService.create_one(attachment)    photos.push(photo);  }  let body = {}  for (const key of Object.keys(fields)) {    const field = fields[key];    if (Array.isArray(field)) {      body[key] = field.filter(k => !k.file).map(k => k.value);    }    else if (!field.file && field.value) {      body[key] = field.value;    }  }  await redis_client.set(`${id}-2`, JSON.stringify(body));  reply.redirect(`/postings/wizard/${id}/2`);}export async function get_step(req, reply) {  const flash = reply.flash();  const stream = reply.init_stream();  const user = req.user;  const t = req.i18n.t  const { id, step } = req.params;  const top = await render_file("/partials/top.html", {    meta: { title: "New posting", lang: req.language }  })  stream.push(top)  const header = await render_file("/partials/header.html", {    t,    user,  });  stream.push(header);  const posting_top = await render_file("/posting/new/top.html", { step, t, wizard_id: id })  stream.push(posting_top);  let rendered_step  switch(step) {    case "1": {      const posting_data = await redis_client.hgetall(`${id}-1`);      const categories = await CategoryService.get_many({ lang: req.language });      rendered_step = await render_file(`/posting/new/step-${step}`, { flash, categories: array_to_tree(categories), t, posting_data });      break;    }    case "2": {      const first_step_data = await redis_client.hgetall(`${id}-1`);      const valid = req.validateInput(first_step_data, new_posting_schema.essential);      if (!valid) {        rendered_step = await render_file("/partials/404.html");        break;      }      const second_step_data = JSON.parse(await redis_client.get(`${id}-2`) || null) || {};      const fields = await CategoryService.get_fields({ category_id: first_step_data.category_id, lang: req.language });      rendered_step = await render_file(`/posting/new/step-${step}`, { flash, fields, t, first_step_data, second_step_data })      break;    }    default:      rendered_step = await render_file("/partials/404.html");      break  }  stream.push(rendered_step)  const step_bottom = await render_file("/posting/new/bottom.html");  stream.push(step_bottom);  const bottom = await render_file("/partials/bottom.html", {    scripts: ["/public/js/elastic-textarea.js", "/public/js/new-posting.js"]  });  stream.push(bottom);  stream.push(null);  return reply;}export async function get_new(req, reply) {  const id = Math.random().toString(32).slice(2);  reply.redirect(`/postings/wizard/${id}?step=1`);}// postings/wizard/nonce/1// export async function get_new(req, reply) {//   const flash = reply.flash();//   const stream = reply.init_stream();//   const user = req.user;//   const t = req.i18n.t;//   const step = parseInt(req.query.step || "1", 10);//   const posting_data = JSON.parse(req.session.get("new-posting") || null)//   const top = await render_file("/partials/top.html", {//     meta: { title: "New posting", lang: req.language }//   })//   stream.push(top)//   const header = await render_file("/partials/header.html", {//     t,//     user,//   });//   stream.push(header);//   const posting_top = await render_file("/posting/new/top.html", { step, t })//   stream.push(posting_top);//   let rendered_step//   switch (step) {//     case 1: {//       const categories = await CategoryService.get_many({ lang: req.language });//       rendered_step = await render_file(`/posting/new/step-${step}`, { categories: array_to_tree(categories), t, posting_data });//       break;//     }//     case 2: {//       const fields = await CategoryService.get_fields({ category_id: posting_data.category_id, lang: req.language });//       rendered_step = await render_file(`/posting/new/step-${step}`, { fields, t, posting_data })//       break;//     }//     default://       rendered_step = await render_file("/partials/404.html");//       break//   }//   stream.push(rendered_step)//   const step_bottom = await render_file("/posting/new/bottom.html");//   stream.push(step_bottom);//   const bottom = await render_file("/partials/bottom.html", {//     scripts: ["/public/js/elastic-textarea.js", "/public/js/new-posting.js"]//   });//   stream.push(bottom);//   stream.push(null);//   return reply;// }export async function submit_step(req, reply) {  const { step = "1", ...data} = req.body  req.session.set("new-posting", JSON.stringify(data));  reply.redirect(`/postings/new?step=${parseInt(step, 10) + 1}`);}